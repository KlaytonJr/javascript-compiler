/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */

options
{
  static = false;
}

PARSER_BEGIN(javascript)

import java.io.File;
import java.util.Scanner;

public class javascript
{
  public static void main(String args []) throws ParseException
  {
    try {
        File file = new File("./ex.txt");
        Scanner sc = new Scanner(file);
        String line = "";

        Boolean opened = false;

        while (sc.hasNextLine()) {
            try {
                String actual_line = sc.nextLine();
                System.out.println(actual_line);
                if (actual_line.endsWith("{") || opened) {
                    opened = true;
                    line += actual_line;
                    if (actual_line.startsWith("}") && !actual_line.endsWith("{")) {
                        opened = false;
                        System.out.println(line);
                        new javascript(new java.io.StringReader(line)).INICIO();
                        line = "";
                    }
                } else {
                    new javascript(new java.io.StringReader(actual_line)).INICIO();
                }
            } catch(Throwable e) {
                throw e;
            }
        }
        System.out.println("\nA Sintaxe Correta. Tokens Identificados.\n");
	}catch(Throwable e) {
		System.out.println("\n\nErro na sintaxe: " + e.getMessage());
	}
  }
}

PARSER_END(javascript)

SKIP:
{ " " | "\r" | "\t" | "\n" }


/* ========================================================================== */
/*                                   TOKENS                                   */
/* ========================================================================== */

/* ========================================================================== */
/* Characteres Padrão */
/* ========================================================================== */

TOKEN:
{
        < #DIGITO: ["0" - "9"] >
    |   < #LETRA : (["a" - "z"] | ["A" - "Z"]) >
    |   < ASPAS: "\"" | "\'" | "`" >
    |   < NEGACAO: "!" >
    |   < INCREMENTO: "++" >
    |   < DECREMENTO: "--" >
}


/* ========================================================================== */
/* Palavras Reservadas */
/* ========================================================================== */

TOKEN:
{
        < RETURN: "return" > : DEFAULT
    |   < IF: "if" > : DEFAULT
    |   < ELSE_IF: "else if" > : DEFAULT
    |   < ELSE: "else" > : DEFAULT
    |   < WHILE: "while" > : DEFAULT
    |   < PRINT: "console.log" > : DEFAULT
    |   < PROMPT: "prompt" > : DEFAULT
    |   < NULL: "null" > : DEFAULT
    |   < TRUE: "true" > : DEFAULT
    |   < FALSE: "false" > : DEFAULT
    |   < NEW: "new" > : DEFAULT
    |   < FUNCTION: "function" > : DEFAULT
    |   < FUNCTION_UPPER: "Function" > : DEFAULT
    |   < TYPE: "let" | "var" | "const" > : DEFAULT
}


/* ========================================================================== */
/* Tipos Básicos - Inteiro, Real, String + Identificador */
/* ========================================================================== */

// Inteiro -> 2 ; 2. ; 2.0; +2 ; +2. ; +2.0 ; -2 ; -2. ; -20.0 
// Real -> 2.1 ; .2 ; +2.2 ; -2.2; +.2 ; -.2 ; +2.3E+20 ; +2.3E-20 ; -2.3E-20 ; -2.3E+20
TOKEN:
{                                                                      
        < INTEIRO:(("+" | "-")? (<DIGITO>)+ (".")? ("0")*) > 
    |   < REAL: ("+" | "-")? (<DIGITO>)* (".") (<DIGITO>)+ ( ("E" | "e" ) ( "+" | "-" )? (<DIGITO>)+ )? >
}

// " Qualquer letra, digito, espaço ou caracter especial (n vezes) "
TOKEN:{
    < STRING: <ASPAS> (<LETRA> | <DIGITO> | " " | ("+" | "-" | "=" | "*" | "**" | "/" | "%" | "|" | "^" | "&" | "," | "." | ":" | ";" | "{" | "}" | "[" | "]" | "(" | ")" | "~" | "@" | "#" | "_" | "<" | ">" | "!") )* <ASPAS> >
}

// Pode iniciar com letra, $ ou _ e em seguida seguido dos mesmo caracteres com a adição de digito
// $variavel ; _variavel_ ; variavel ; variavel2   etc...
TOKEN:
{
    < IDENTIFICADOR : (<LETRA>| "$" | "_" ) (<LETRA> | <DIGITO>| "$" | "_ ")* >
}

/* ========================================================================== */
/*                                  FUNÇÕES                                   */
/* ========================================================================== */
/* ========================================================================== */
/* Início + linha (padrão do sistema) */
/* ========================================================================== */

void INICIO():
{}
{
   linha() 
}

void linha():
{}
{
    ((
        expressao() 
    |   comandoEntrada()
    |   comandoSaida()
    |   condicionalSe() 
    |   lacoWhile()
    |   declaracaoDeFuncao()) (";")? )*
}


/* ========================================================================== */
/* Expressão */
/* ========================================================================== */

// let variavel ; const variavel ; var variavel
// --variavel ; ++variavel ; variavel++ ; variavel-- ; funcao() ; funcao(param) ; funcao(param, param2)
// ExpressaoLiteral -> string ou numero(real ou inteiro) ou true ou false
// ( expressao ) ; ( param ) => { escopoFunc } ; ( param, param2 ) => { escopoFunc }

// Em seguida temos as operações
void expressao():
{}
{
    ((
        (<TYPE> | (<INCREMENTO> | <DECREMENTO> | <NEGACAO>))? <IDENTIFICADOR> (ChamadaDeMetodo() | <INCREMENTO> | <DECREMENTO>)?
        |   ExpressaoLiteral()
    ) (Operacoes())? )
    |   "(" (expressao())? ("," expressao())* ")" ( ("=>" escopoFuncao()) | Operacoes() )?
}

void ExpressaoLiteral():
{}
{
    <INTEIRO> | <REAL> | <STRING> | <TRUE> | <FALSE>
}


/* ========================================================================== */
/* Operações */
/* ========================================================================== */

void Operacoes():
{}
{
  (Atribuicao() | ComparacaoLogica() | ComparacaoRelacional() | expressaoNumerica())
}

// A atribuição, pode atribuir uma expressao ou a declaração de função a uma variável
void Atribuicao():
{}
{
  "=" (expressao() | declaracaoDeFuncao())
}

// Comparar uma expressão a outra expressão
void ComparacaoLogica():
{}
{
  ("&&" | "||") expressao()
}

// Relacionar uma expressão a outra expressão
void ComparacaoRelacional():
{}
{
  (">" | "<" | ">=" | "<=" | "==" | "!=" | "!==" | "===") expressao()
}

// Atribuicao com operações de uma expressão a outra expressão
void expressaoNumerica():
{}
{
  ("+" | "+=" | "-" | "-=" | "*" | "**" | "**=" | "*=" | "/" | "/=" | "%" | "%=" | "|=" | "^=" | "&=") expressao()
}


/* ========================================================================== */
/* Comando de Entrada e Saída */
/* ========================================================================== */

// prompt("Texto de entrada");
void comandoEntrada():
{}
{
    <PROMPT> ("(") <STRING> (")")
}

// console.log("Texto de saída ou expressao");
void comandoSaida():
{}
{
    <PRINT> ("(") ListaDeArgumentos() (")")
}


/* ========================================================================== */
/* Se, Senão Se, Senão */
/* ========================================================================== */

// if ( expressao ) { escopo } *pode ter ou nao else_if ou else*
void condicionalSe():
{}
{
    <IF> "(" expressao() ")" escopoFuncao() (condicionalSenaoSe() | condicionalSenao())?
}

// else if ( expressao ) { escopo } *pode ter ou nao else_if ou else*
void condicionalSenaoSe():
{}
{
    <ELSE_IF> "(" expressao() ")" escopoFuncao() (condicionalSenaoSe() | condicionalSenao())?
}

// else { escopo }
void condicionalSenao():
{}
{
    <ELSE> escopoFuncao()
}


/* ========================================================================== */
/* Laço while */
/* ========================================================================== */

// while ( expressao ) { escopo }
void lacoWhile():
{}
{
    <WHILE> "(" expressao() ")" escopoFuncao()
}


/* ========================================================================== */
/* Declaração e Chamada de Função */
/* ========================================================================== */

// function nomeFuncao ( param* ) { escopo } ; function ( param* ) { escopo }
// new Function ( param* ) => { escopo } ; Function ( param* ) => { escopo }
// ( declaracaoDeFuncao ) -> terá as funções dentro de parenteses 
void declaracaoDeFuncao():
{}
{
      <FUNCTION> (<IDENTIFICADOR>)? ChamadaDeMetodo() escopoFuncao()
    | (<NEW> <FUNCTION_UPPER> | <FUNCTION_UPPER>) ChamadaDeMetodo() ("=>" escopoFuncao())?
    | "(" declaracaoDeFuncao() ")"
}

// O escopo vai conter linha e pode retornar expressao ou uma declaração de função
void escopoFuncao():
{}
{
  "{" linha() (<RETURN> (expressao() | declaracaoDeFuncao()))? "}"
}

void ChamadaDeMetodo():
{}
{
  "(" (ListaDeArgumentos())? ")"
}

void ListaDeArgumentos():
{}
{
  expressao() ("," expressao())*
}

// A chamada de função está presente dentro da expressão.
