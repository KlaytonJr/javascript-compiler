/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */

options
{
  static = false;
}

PARSER_BEGIN(javascript)

import java.io.File;
import java.util.Scanner;

public class javascript
{
  public static void main(String args []) throws ParseException
  {
    try {
        File file = new File("./ex.txt");
        Scanner sc = new Scanner(file);

        String line = "";

        while (sc.hasNextLine()) {
            String actual_line = sc.nextLine();
            line += actual_line;
            System.out.println(actual_line);
        }
        //System.out.println(line);
        new javascript(new java.io.StringReader(line)).INICIO();
		System.out.println("\n\nA Sintaxe Correta. Tokens Identificados.");
	}catch(Throwable e) {
		System.out.println("\n\nErro na sintaxe: " + e.getMessage());
	}
  }
}

PARSER_END(javascript)

SKIP:
{	" " | "\r" | "\t" | "\n" 
}

TOKEN:
{
    < #DIGITO: ["0" - "9"] >
  | < #LETRA : (["a" - "z"] | ["A" - "Z"]) >
  | < TIPO_VARIAVEL: ("let" | "var" | "const") >
  | < BOOLEANO: ( "true" | "false" ) >
  | < OPERADOR_ARITIMETICO : ( "+" | "-" | "*" | "**" | "/" | "%" )>
  | < OPERADOR_ATRIBUICAO : ( "=" | "+=" | "-=" | "*=" | "**=" | "/=" | "%=" | "|=" | "&=" | "^=" )>
  | < OPERADOR_RELACIONAL : ( ">" | "<" | ">=" | "<=" | "!=" | "!==" | "==" | "===" )>
  | < OPERADOR_BOOLEANO : ( "&&" | "||"  )>
  //| < LIMITADOR : ( "(" | ")" | "[" | "]" | "{" | "}" )>
  | < ASPAS: ( "\"" | "\'" | "`" ) >
  | < AP: ( "(" ) > : DEFAULT
  | < FP: ( ")" ) > : DEFAULT
  | < VIRGULA: ( "," ) > : DEFAULT
}

TOKEN:
{
      < IF: "if" > : DEFAULT
    | < ELSE_IF: "else if" > : DEFAULT
    | < ELSE: "else" > : DEFAULT
    | < WHILE: "while" > : DEFAULT
    | < CONSOLE: "console.log" > : DEFAULT
    | < FUNCTION: "function" > : DEFAULT
    | < FUNCTION_UPPER: "Function" > : DEFAULT
    | < RETURN: "return" > : DEFAULT
    | < NEW: "new" > : DEFAULT
    // Babosa
    | < PROMPT: "prompt" | " prompt" > : DEFAULT
}

//numeros especificação
TOKEN:
{                                                                      
  < INTEIRO:(("+" | "-")? (<DIGITO>)+ (".")? ("0")*) | (("+" | "-")? (".") ("0")+ ) ~["1","2","3","4","5","6","7","8","9","."]> 
| < REAL: ("+" | "-")? (<DIGITO>)* (".") (<DIGITO>)+ ( ("E" | "e" ) ( "+" | "-" )? (<DIGITO>)+ )? >

}

// TO DO: Add caracteres especiais
TOKEN:{
  < STRING: <ASPAS> (<LETRA> | <DIGITO> | " ")* <ASPAS> >
}

//Identificadores
TOKEN:
{
  < IDENTIFICADOR :  (<LETRA>| "$" | "_" ) (<LETRA> | <DIGITO>| "$" | "_ ")* > : DEFAULT
}

//Vazio
void Empty() : {}
{
    {}
}

void INICIO():
{}
{
   linha() (";")?
}

void linha():
{}
{
    LOOKAHEAD( 1 )
        expressao()
    |   comandoEntrada()
    |   comandoSaida()
    |   atribuicao()
    |   condicionalSe()
    |   lacoWhile()
    |   before()
}

void before():
{}
{
  ("--" | "++") <IDENTIFICADOR>
}

void after():
{}
{
  <IDENTIFICADOR> ("--" | "++")
}

void escopo():
{}
{
  "{"  (linha())* "}"
}

void escopoFuncao():
{}
{
  "{" (linha())* (<RETURN> expressao())? "}"
}

void identFunc():
{}
{
    LOOKAHEAD( <IDENTIFICADOR> )
    <IDENTIFICADOR> | chamarFuncao()
}

void membroExp():
{}
{
    (<INTEIRO> | <REAL> | <STRING> | <BOOLEANO> | identFunc() | declaracaoDeFuncao()) ((<OPERADOR_BOOLEANO> | <OPERADOR_RELACIONAL> | <OPERADOR_ARITIMETICO> | <OPERADOR_ATRIBUICAO>) (<INTEIRO> | <REAL> | <STRING> | <BOOLEANO> | identFunc() | declaracaoDeFuncao()))*
}

void expressao():
{}
{
    LOOKAHEAD("(") ( "(" membroExp() ")" )
    ("!")? <AP> membroExp() <FP> | ("!")? membroExp()
}

void atribuicao():
{}
{
    LOOKAHEAD( 2 )
      <TIPO_VARIAVEL> <IDENTIFICADOR>
    | (<TIPO_VARIAVEL>)? <IDENTIFICADOR> <OPERADOR_ATRIBUICAO> (expressao())
}

void comandoEntrada():
{}
{
    <PROMPT> ("(") <STRING> (")")
}

void comandoSaida():
{}
{
    <CONSOLE> ("(") listaParametrosChamada() (")")
}

void condicionalSe():
{}
{
    <IF> "(" expressao() ")" escopo() (condicionalSenaoSe() | condicionalSenao())?
}

void condicionalSenaoSe():
{}
{
    <ELSE_IF> "(" expressao() ")" escopo() (condicionalSenaoSe() | condicionalSenao())?
}

void condicionalSenao():
{}
{
    <ELSE> escopo()
}

void lacoWhile():
{}
{
    <WHILE> "(" expressao() ")" escopo()
}

void listaParametrosChamada():
{}
{
    expressao() maisParametrosChamada()
}

void maisParametrosChamada():
{}
{
    "," expressao() maisParametrosChamada() | Empty()
}

void declaracaoDeFuncao():
{}
{
      <FUNCTION> (<IDENTIFICADOR>)? "(" (listaParametrosChamada())? ")" escopoFuncao()
    | (<NEW> <FUNCTION_UPPER> | <FUNCTION_UPPER>)? "(" (listaParametrosChamada())? ")" "=>" escopoFuncao()
}

void chamarFuncao():
{}
{
    <IDENTIFICADOR> "(" (listaParametrosChamada())? ")"
}
